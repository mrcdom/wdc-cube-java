package br.com.wedocode.shopping.view.react.stub.endpoints;

import java.io.IOException;
import java.util.Map;
import java.util.function.Consumer;

import jakarta.websocket.CloseReason;
import jakarta.websocket.EndpointConfig;
import jakarta.websocket.OnClose;
import jakarta.websocket.OnError;
import jakarta.websocket.OnMessage;
import jakarta.websocket.OnOpen;
import jakarta.websocket.Session;
import jakarta.websocket.server.ServerEndpoint;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.ToNumberPolicy;
import com.google.gson.reflect.TypeToken;

import br.com.wedocode.framework.commons.util.Base62;
import br.com.wedocode.shopping.view.react.stub.util.AppSecurity;
import br.com.wedocode.shopping.view.react.stub.viewimpl.ApplicationReactImpl;

@ServerEndpoint(value = "/dispatcher/{id}", subprotocols = {
        "wdc" }, configurator = WdcStateDispatcherConfiguratator.class)
public class WdcStateDispatcherEndpoint {

    private static Logger LOG = LoggerFactory.getLogger(WdcStateDispatcherEndpoint.class);

    private static Gson GSON = new GsonBuilder()
            .serializeNulls()
            .setObjectToNumberStrategy(ToNumberPolicy.DOUBLE)
            .create();

    private static TypeToken<Map<String, Object>> REQ_TYPE_TOK = new TypeToken<Map<String, Object>>() {
    };

    private String appId;
    private String appSignature;
    private Session wsSession;

    @OnOpen
    public void onWebSocketOpen(Session session, EndpointConfig config) {
        this.wsSession = session;

        var closeSession = (Consumer<String>) (msg) -> {
            try {
                session.close();
            } catch (IOException e) {
                LOG.warn("Closing connection by " + msg, e);
            }
        };

        this.appId = session.getPathParameters().get("id");
        if (StringUtils.isBlank(this.appId)) {
            closeSession.accept("rejected appId: empty ID");
            return;
        }

        var security = AppSecurity.BEAN;
        var b62 = Base62.BEAN;

        var appIdParts = StringUtils.split(appId, '.');
        if (appIdParts.length != 2) {
            closeSession.accept("rejected appId: ID does not have the proper structure");
            return;
        }

        var appIdPart1 = appIdParts[0];
        var appIdPart2 = appIdParts[1];

        var expectedAppIdPart2 = b62.encodeToString(security.signAsHash(appIdPart1.getBytes()));
        if (!appIdPart2.equals(expectedAppIdPart2)) {
            closeSession.accept("rejected appId: ID not generated by the server");
            return;
        }

        var signature = (String) session.getUserProperties().get("APP_SIGNATURE");
        if (StringUtils.isEmpty(signature)) {
            closeSession.accept("rejected signature: It is empty");
            return;
        }
        this.appSignature = signature;
    }

    @OnClose
    public void onWebSocketClose(CloseReason close) {
        this.wsSession = null;
        var app = this.getApp();
        if (app != null) {
            app.setWsSession(null);
            if (!app.isAuthenticated()) {
                app.release();
            }
        }
    }

    @OnError
    public void onWebSocketError(Throwable cause) {
        var app = this.getApp();
        if (app != null) {
            app.alertUnexpectedError(LOG, cause.getMessage(), cause);
        } else {
            LOG.warn("WebSocket::onError", cause);
        }
    }

    @OnMessage
    public void onWebSocketText(String jsonRequest) {
        try {
            Map<String, Object> request;
            try {
                request = GSON.fromJson(jsonRequest, REQ_TYPE_TOK.getType());
            } catch (Throwable cause) {
                var app = this.getApp();
                if (app != null) {
                    app.alertUnexpectedError(LOG, cause.getMessage(), cause);
                } else {
                    LOG.warn("WebSocket::onMessage - parseRequest", cause);
                }
                return;
            }

            var app = this.getOrCreateApp(request);
            try {
                app.setWsSession(this.wsSession);
                app.sendResponse(request, false);
            } catch (Throwable cause) {
                cause.printStackTrace();
                app.alertUnexpectedError(LOG, cause.getMessage(), cause);
            }
        } catch (final Exception thrown) {
            LOG.error("Unexpected", thrown);
        }
    }

    // :: Internal

    private ApplicationReactImpl getApp() {
        return ApplicationReactImpl.get(appId);
    }

    private ApplicationReactImpl getOrCreateApp(Map<String, Object> request) {
        var app = ApplicationReactImpl.get(appId);
        if (app == null) {
            request.put("secret", this.appSignature);
            app = ApplicationReactImpl.getOrCreate(appId, request);
        }
        app.setWsSession(this.wsSession);
        app.extendLife();
        return app;
    }

}
